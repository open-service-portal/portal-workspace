#!/bin/bash
# Generic cluster configuration script
# Automatically detects cluster and applies appropriate configuration

set -e

# Script directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_DIR="$(dirname "$SCRIPT_DIR")"
MANIFEST_DIR="${SCRIPT_DIR}/manifests-config"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get current kubectl context
CURRENT_CONTEXT=$(kubectl config current-context 2>/dev/null || echo "")

if [ -z "$CURRENT_CONTEXT" ]; then
    echo -e "${RED}Error: No kubectl context selected${NC}"
    echo "Available contexts:"
    kubectl config get-contexts
    echo ""
    echo "Usage: kubectl config use-context <context-name> && $0"
    exit 1
fi

echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}   Cluster Configuration Tool${NC}"
echo -e "${BLUE}================================${NC}"
echo ""
echo -e "Current context: ${GREEN}${CURRENT_CONTEXT}${NC}"

# Find environment file
ENV_FILE=""

# Try to find environment file for this context
if [ -f "$WORKSPACE_DIR/.env.${CURRENT_CONTEXT}" ]; then
    ENV_FILE=".env.${CURRENT_CONTEXT}"
else
    echo -e "${YELLOW}No environment file found for context: ${CURRENT_CONTEXT}${NC}"
    echo ""
    echo "Expected file: .env.${CURRENT_CONTEXT}"
    echo ""
    echo "You can create it from an example:"
    echo "  cp .env.rancher-desktop.example .env.${CURRENT_CONTEXT}"
    echo "  vim .env.${CURRENT_CONTEXT}"
    echo ""
    exit 1
fi

echo -e "Using environment file: ${GREEN}${ENV_FILE}${NC}"
echo ""

# Load environment variables
if [ -f "$WORKSPACE_DIR/$ENV_FILE" ]; then
    set -a  # Auto-export all variables
    source "$WORKSPACE_DIR/$ENV_FILE"
    set +a  # Turn off auto-export
    echo "✓ Loaded $ENV_FILE"
else
    echo -e "${RED}Error: Environment file not found: $ENV_FILE${NC}"
    echo "Please create it from the example:"
    echo "  cp ${ENV_FILE}.example $ENV_FILE"
    echo "  vim $ENV_FILE"
    exit 1
fi

# =============================================================================
# Common Functions
# =============================================================================

# Update Backstage configuration
update_backstage_config() {
    echo ""
    echo "Configuring Backstage for cluster: $CURRENT_CONTEXT"
    
    # Check if app-portal directory exists
    if [ ! -d "$WORKSPACE_DIR/app-portal" ]; then
        echo -e "${YELLOW}Warning: app-portal directory not found${NC}"
        echo "Clone the app-portal repository first:"
        echo "  git clone https://github.com/open-service-portal/app-portal.git"
        return 1
    fi
    
    # Get token from cluster
    SECRET_NAME="backstage-k8s-sa-token"
    TOKEN=$(kubectl get secret $SECRET_NAME -n default -o jsonpath='{.data.token}' 2>/dev/null | base64 -d)
    
    if [ -z "$TOKEN" ]; then
        echo -e "${RED}Error: No Backstage token found in cluster${NC}"
        echo "Run setup-cluster.sh first to create the service account:"
        echo "  ./scripts/setup-cluster.sh"
        return 1
    fi
    
    # Get cluster information
    K8S_API_URL=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
    K8S_CLUSTER_NAME=$(kubectl config current-context)
    
    # Create config file named after the context with .local.yaml suffix
    CONFIG_FILE="app-config.${CURRENT_CONTEXT}.local.yaml"
    APP_TITLE="Backstage (${CURRENT_CONTEXT})"
    
    # Generate a secure API token for this cluster
    if ! command -v openssl >/dev/null 2>&1; then
        echo -e "${RED}Error: openssl is not installed or not found in PATH. Cannot generate API token.${NC}"
        return 1
    fi
    TOKEN_SUFFIX=$(openssl rand -hex 16 2>/dev/null)
    if [ -z "$TOKEN_SUFFIX" ]; then
        echo -e "${RED}Error: Failed to generate random token with openssl.${NC}"
        return 1
    fi
    API_TOKEN="backstage-api-${CURRENT_CONTEXT}-${TOKEN_SUFFIX}"
    
    # Create/update Backstage config
    cat > "$WORKSPACE_DIR/app-portal/$CONFIG_FILE" <<EOF
# Cluster configuration - auto-generated by cluster-config.sh
# DO NOT EDIT MANUALLY - Run cluster-config.sh to regenerate

app:
  title: $APP_TITLE
  baseUrl: http://localhost:3000

backend:
  baseUrl: http://localhost:7007
  auth:
    # Enable external API access with static token
    externalAccess:
      - type: static
        options:
          token: $API_TOKEN
          subject: api-client-${CURRENT_CONTEXT}
        # Access is unrestricted by default
        # To restrict access, uncomment and modify:
        # accessRestrictions:
        #   - plugin: catalog
        #   - plugin: scaffolder
        #   - plugin: kubernetes

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: $K8S_API_URL
          name: $K8S_CLUSTER_NAME
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: $TOKEN
EOF
    
    echo -e "${GREEN}✓ Created app-portal/$CONFIG_FILE${NC}"
    echo -e "${GREEN}✓ Generated API token: ${API_TOKEN:0:20}...${NC}"
    
    # Store API token for display later
    GENERATED_API_TOKEN="$API_TOKEN"
}

# Configure Flux for catalog-orders
configure_flux_catalog_orders() {
    echo ""
    echo "Configuring Flux to watch catalog-orders for context: ${CURRENT_CONTEXT}"
    
    # Check if Flux is installed
    if ! kubectl get namespace flux-system &>/dev/null; then
        echo -e "${YELLOW}Flux is not installed on this cluster${NC}"
        return 1
    fi
    
    # Export CURRENT_CONTEXT for envsubst
    export CURRENT_CONTEXT
    
    # Apply catalog-orders configuration with environment substitution
    if envsubst < "$MANIFEST_DIR/flux-catalog-orders.yaml" | kubectl apply -f -; then
        echo -e "${GREEN}✓ Created/Updated Kustomization: catalog-orders-${CURRENT_CONTEXT}${NC}"
        echo -e "${GREEN}✓ Watching path: ./${CURRENT_CONTEXT}${NC}"
        
        # List all catalog-orders Kustomizations on this cluster
        echo ""
        echo "Active catalog-orders Kustomizations on this cluster:"
        kubectl get kustomizations -n flux-system | grep -E "NAME|catalog-orders" || true
        echo ""
        
        # Force reconciliation for the context-specific Kustomization
        flux reconcile source git catalog-orders 2>/dev/null || true
        flux reconcile kustomization catalog-orders-${CURRENT_CONTEXT} 2>/dev/null || true
    else
        echo -e "${YELLOW}Note: Could not configure catalog-orders${NC}"
    fi
}

# Configure cert-manager for Let's Encrypt (if applicable)
configure_cert_manager() {
    echo ""
    echo "Checking cert-manager configuration..."
    
    # Skip cert-manager for localhost development
    if [ -z "$BASE_DOMAIN" ] || [ "$BASE_DOMAIN" == "localhost" ] || [ "$BASE_DOMAIN" == "127.0.0.1" ]; then
        echo -e "${YELLOW}Skipping cert-manager configuration for local development (BASE_DOMAIN=$BASE_DOMAIN)${NC}"
        echo "  TLS certificates are not needed for localhost"
        return 0
    fi
    
    # Check if cert-manager is installed
    if ! kubectl get namespace cert-manager &>/dev/null; then
        echo -e "${YELLOW}cert-manager is not installed${NC}"
        echo "  Run cluster-setup.sh to install cert-manager for non-local domains"
        return 1
    fi
    
    # Check for required environment variables
    if [ -z "$LETSENCRYPT_EMAIL" ] || [ "$LETSENCRYPT_EMAIL" == "admin@example.com" ]; then
        echo -e "${YELLOW}Note: LETSENCRYPT_EMAIL not configured${NC}"
        echo "  Add LETSENCRYPT_EMAIL to your $ENV_FILE to enable Let's Encrypt"
        return 1
    fi
    
    if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ "$CLOUDFLARE_API_TOKEN" == "your-api-token-here" ]; then
        echo -e "${YELLOW}Note: CLOUDFLARE_API_TOKEN not configured${NC}"
        echo "  cert-manager needs Cloudflare API token for DNS-01 challenge"
        return 1
    fi
    
    # Create Cloudflare API token secret for cert-manager
    echo "Creating Cloudflare API token secret for cert-manager..."
    kubectl create secret generic cloudflare-api-token-cert-manager \
        --from-literal=api-token="${CLOUDFLARE_API_TOKEN}" \
        --namespace cert-manager \
        --dry-run=client -o yaml | kubectl apply -f -
    
    # Apply ClusterIssuers with environment substitution
    echo "Creating Let's Encrypt ClusterIssuers..."

    # Create letsencrypt issuer
    export LETSENCRYPT_EMAIL
    if envsubst < "$MANIFEST_DIR/letsencrypt-issuers.yaml" | kubectl apply -f -; then
        echo -e "${GREEN}✓ cert-manager configured with Let's Encrypt${NC}"
        echo "  Email: ${LETSENCRYPT_EMAIL}"
        echo "  Issuer: letsencrypt-prod"
        echo "  Challenge: DNS-01 via Cloudflare"
    else
        echo -e "${YELLOW}Note: Could not configure Let's Encrypt${NC}"
    fi
    
    # Verify issuers are ready
    echo "Verifying ClusterIssuers..."
    sleep 2
    kubectl get clusterissuers
}

# Configure External-DNS (if applicable)
configure_external_dns() {
    echo ""
    echo "Checking External-DNS configuration..."
    
    # Check if External-DNS is installed
    if ! kubectl get namespace external-dns &>/dev/null; then
        echo -e "${YELLOW}External-DNS is not installed${NC}"
        return 1
    fi
    
    # Check for Cloudflare credentials
    if [ -n "$CLOUDFLARE_API_TOKEN" ] && [ "$CLOUDFLARE_API_TOKEN" != "your-api-token-here" ]; then
        echo "Creating Cloudflare API token secret for External-DNS..."
        kubectl create secret generic cloudflare-api-token \
            --from-literal=cloudflare_api_token="${CLOUDFLARE_API_TOKEN}" \
            --namespace external-dns \
            --dry-run=client -o yaml | kubectl apply -f -
        
        echo "✓ Cloudflare credentials configured for External-DNS"
        echo "  External-DNS will create real DNS records in Cloudflare"
        echo "  Zone: ${CLOUDFLARE_ZONE_NAME:-openportal.dev}"
    else
        echo -e "${YELLOW}Note: No Cloudflare credentials configured${NC}"
        echo "  External-DNS will run but cannot create DNS records"
    fi
    
    # Update EnvironmentConfig if needed
    if [ -n "$BASE_DOMAIN" ]; then
        echo "Updating dns-config EnvironmentConfig..."
        kubectl patch environmentconfig dns-config \
            --type merge \
            --patch "{\"data\": {\"zone\": \"${BASE_DOMAIN}\"}}" \
            2>/dev/null || echo "  Note: EnvironmentConfig not found"
    fi
}

# Update EnvironmentConfigs (if manifest exists and variables are set)
update_environment_configs() {
    if [ -f "$MANIFEST_DIR/environment-configs.yaml" ] && [ -n "$BASE_DOMAIN" ]; then
        echo ""
        echo "Updating EnvironmentConfigs..."
        envsubst < "$MANIFEST_DIR/environment-configs.yaml" | kubectl apply -f -
        echo "✓ EnvironmentConfigs updated"
    fi
}

# =============================================================================
# Main Execution
# =============================================================================

echo -e "${BLUE}Starting configuration...${NC}"
echo ""

# Create demo namespace if it doesn't exist
echo "Ensuring demo namespace exists..."
kubectl create namespace demo --dry-run=client -o yaml | kubectl apply -f - >/dev/null 2>&1
echo -e "${GREEN}✓ Demo namespace ready${NC}"

# Create system namespace for infrastructure XRs
echo "Creating system namespace for infrastructure XRs..."
kubectl create namespace system --dry-run=client -o yaml | kubectl apply -f - >/dev/null 2>&1
kubectl label namespace system purpose=infrastructure-xrs --overwrite >/dev/null 2>&1
echo -e "${GREEN}✓ System namespace created for infrastructure XRs${NC}"

# Run common configurations
update_backstage_config
configure_flux_catalog_orders
configure_cert_manager
configure_external_dns
update_environment_configs

# Summary
echo ""
echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}   Configuration Complete!${NC}"
echo -e "${GREEN}================================${NC}"
echo ""
echo -e "Cluster: ${CURRENT_CONTEXT}"
echo -e "Config: ${ENV_FILE}"

if [ -n "$BASE_DOMAIN" ]; then
    echo -e "Base Domain: ${BASE_DOMAIN}"
fi

if [ -n "$CLOUDFLARE_ZONE_NAME" ]; then
    echo -e "Cloudflare Zone: ${CLOUDFLARE_ZONE_NAME}"
fi

echo ""
echo "To start Backstage:"
echo "  cd app-portal"
echo "  yarn start  # Auto-detects kubectl context and loads config"

# Function to truncate token for display (show first 4 and last 4 chars)
truncate_token() {
    local token="$1"
    local len=${#token}
    if [ "$len" -le 8 ]; then
        echo "$token"
    else
        local first4="${token:0:4}"
        local last4="${token: -4}"
        echo "${first4}...${last4}"
    fi
}

# Show API usage instructions if token was generated
if [ -n "$GENERATED_API_TOKEN" ]; then
    TRUNCATED_TOKEN=$(truncate_token "$GENERATED_API_TOKEN")
    echo ""
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}   Backstage API Access${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    echo "API Token generated for programmatic access:"
    echo -e "${YELLOW}${TRUNCATED_TOKEN}${NC} (token truncated for security)"
    echo -e "${RED}WARNING: Keep your API token secret. Do not share or post it publicly.${NC}"
    echo ""
    echo "Full token has been saved to: ${CONFIG_FILE}"
    echo ""
    echo "Example API usage:"
    echo -e "${GREEN}# Get all catalog entities${NC}"
    echo "curl -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\"
    echo "  http://localhost:7007/api/catalog/entities"
    echo ""
    echo -e "${GREEN}# Get templates only${NC}"
    echo "curl -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\"
    echo "  \"http://localhost:7007/api/catalog/entities?filter=kind=Template\""
    echo ""
    echo -e "${GREEN}# Get a specific entity${NC}"
    echo "curl -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\"
    echo "  \"http://localhost:7007/api/catalog/entities/by-name/template/default/your-template-name\""
    echo ""
    echo -e "${YELLOW}Note: Restart Backstage after running this script for token to take effect${NC}"
fi

echo ""
echo -e "${GREEN}Done!${NC}"